import requests

api_key = "your_api_key_here"

def search_vulnerabilities(product_name, product_version, max_results=10):
    url = "https://vulners.com/api/v3/search/lucene/"
    query = f'"{product_name}" AND "{product_version}"'
    params = {
        "query": query,
        "apiKey": api_key,
        "size": max_results * 2
    }

    response = requests.get(url, params=params)
    if response.status_code == 200:
        results = response.json()
        if results['result'] == 'OK' and 'data' in results and 'search' in results['data']:
            vulnerabilities = []
            for vuln in results['data']['search']:
                cvss_score = vuln['_source'].get('cvss', {}).get('score', 0)
                vulnerabilities.append({
                    'title': vuln['_source'].get('title', 'No Title'),
                    'description': vuln['_source'].get('description', 'No description available.'),
                    'cvss_score': cvss_score,
                    'severity': vuln['_source'].get('cvss', {}).get('severity', 'N/A'),
                    'published_date': vuln['_source'].get('published', 'N/A'),
                    'url': vuln['_source'].get('href', 'N/A')
                })
            vulnerabilities_sorted = sorted(vulnerabilities, key=lambda x: x['cvss_score'], reverse=True)
            print(f"Top {max_results} vulnerabilities for {product_name} version {product_version}:\n")
            for i, vuln in enumerate(vulnerabilities_sorted[:max_results], start=1):
                print(f"{i}. Title: {vuln['title']}")
                print(f"   Description: {vuln['description']}")
                print(f"   CVSS Score: {vuln['cvss_score']}")
                print(f"   Severity: {vuln['severity']}")
                print(f"   Published Date: {vuln['published_date']}")
                print(f"   URL: {vuln['url']}")
                print("-" * 80)
        else:
            print("No vulnerabilities found for the specified product and version.")
    else:
        print(f"Error: Unable to retrieve data (status code {response.status_code})")

if __name__ == "__main__":
    product_name = input("Enter the product name: ")
    product_version = input("Enter the product version: ")
    search_vulnerabilities(product_name, product_version)
